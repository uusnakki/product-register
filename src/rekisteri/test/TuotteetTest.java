package rekisteri.test;
// Generated by ComTest BEGIN
import rekisteri.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.23 13:08:29 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class TuotteetTest {


  // Generated by ComTest BEGIN
  /** 
   * testLisaa53 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa53() throws SailoException {    // Tuotteet: 53
    Tuotteet tuotteet = new Tuotteet(); 
    Tuote t1 = new Tuote(), t2 = new Tuote(); 
    assertEquals("From: Tuotteet line: 57", 0, tuotteet.getLkm()); 
    tuotteet.lisaa(t1); assertEquals("From: Tuotteet line: 58", 1, tuotteet.getLkm()); 
    tuotteet.lisaa(t2); assertEquals("From: Tuotteet line: 59", 2, tuotteet.getLkm()); 
    tuotteet.lisaa(t1); assertEquals("From: Tuotteet line: 60", 3, tuotteet.getLkm()); 
    Iterator<Tuote> it = tuotteet.iterator(); 
    assertEquals("From: Tuotteet line: 62", t1, it.next()); 
    assertEquals("From: Tuotteet line: 63", t2, it.next()); 
    assertEquals("From: Tuotteet line: 64", t1, it.next()); 
    tuotteet.lisaa(t1); assertEquals("From: Tuotteet line: 65", 4, tuotteet.getLkm()); 
    tuotteet.lisaa(t1); assertEquals("From: Tuotteet line: 66", 5, tuotteet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa191 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa191() throws SailoException,CloneNotSupportedException {    // Tuotteet: 191
    Tuotteet tuotteet = new Tuotteet(); 
    Tuote a1 = new Tuote(), a2 = new Tuote(); 
    a1.rekisteroi(); a2.rekisteroi(); 
    assertEquals("From: Tuotteet line: 197", 0, tuotteet.getLkm()); 
    tuotteet.korvaaTaiLisaa(a1); assertEquals("From: Tuotteet line: 198", 1, tuotteet.getLkm()); 
    tuotteet.korvaaTaiLisaa(a2); assertEquals("From: Tuotteet line: 199", 2, tuotteet.getLkm()); 
    Tuote a3 = a1.clone(); 
    a3.setValmistaja("Nike"); 
    Iterator<Tuote> it = Tuotteet.iterator(); 
    assertEquals("From: Tuotteet line: 203", true, it.next() == a1); 
    tuotteet.korvaaTaiLisaa(a3); assertEquals("From: Tuotteet line: 204", 2, tuotteet.getLkm()); 
    it = tuotteet.iterator(); 
    Tuote j0 = it.next(); 
    assertEquals("From: Tuotteet line: 207", a3, j0); 
    assertEquals("From: Tuotteet line: 208", true, j0 == a3); 
    assertEquals("From: Tuotteet line: 209", false, j0 == a1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi251 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi251() throws SailoException {    // Tuotteet: 251
    Tuotteet tuotteet = new Tuotteet(); 
    Tuote j1 = new Tuote(); j1.parse("1|Helly Hansen GRX|2019|150€|20|S|"); 
    Tuote j2 = new Tuote(); j2.parse("2|Nike Air Max2||50€|3|39|"); 
    Tuote j3 = new Tuote(); j3.parse("3|Adidas Go|1997||119€|60|S|"); 
    Tuote j4 = new Tuote(); j4.parse("4|Umbro Pro|2006|100€|40|M|"); 
    Tuote j5 = new Tuote(); j5.parse("5|Kappa Yo|2020|12€|30|XS|"); 
    tuotteet.lisaa(j1); tuotteet.lisaa(j2); tuotteet.lisaa(j3); tuotteet.lisaa(j4); tuotteet.lisaa(j5); 
    List<Tuote> loytyneet; 
    loytyneet = (List<Tuote>)tuotteet.etsi("*s*",1); 
    assertEquals("From: Tuotteet line: 262", 2, loytyneet.size()); 
    assertEquals("From: Tuotteet line: 263", true, loytyneet.get(0) == j3); 
    assertEquals("From: Tuotteet line: 264", true, loytyneet.get(1) == j4); 
    loytyneet = (List<Tuote>)tuotteet.etsi("*7-*",2); 
    assertEquals("From: Tuotteet line: 267", 2, loytyneet.size()); 
    assertEquals("From: Tuotteet line: 268", true, loytyneet.get(0) == j3); 
    assertEquals("From: Tuotteet line: 269", true, loytyneet.get(1) == j5); 
    loytyneet = (List<Tuote>)tuotteet.etsi(null,-1); 
    assertEquals("From: Tuotteet line: 272", 5, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testTuotteetIterator324 
   * @throws SailoException when error
   */
  @Test
  public void testTuotteetIterator324() throws SailoException {    // Tuotteet: 324
    Tuotteet tuotteet = new Tuotteet(); 
    Tuote t1 = new Tuote(), t2 = new Tuote(); 
    t1.rekisteroi(); t2.rekisteroi(); 
    tuotteet.lisaa(t1); 
    tuotteet.lisaa(t2); 
    tuotteet.lisaa(t1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Tuote tuote:tuotteet) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+tuote.getTunnusNro()); 
    String tulos = " " + t1.getTunnusNro() + " " + t2.getTunnusNro() + " " + t1.getTunnusNro(); 
    assertEquals("From: Tuotteet line: 343", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Tuote>  i=tuotteet.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Tuote tuote = i.next(); 
    ids.append(" "+tuote.getTunnusNro()); 
    }
    assertEquals("From: Tuotteet line: 351", tulos, ids.toString()); 
    Iterator<Tuote>  i=tuotteet.iterator(); 
    assertEquals("From: Tuotteet line: 354", true, i.next() == t1); 
    assertEquals("From: Tuotteet line: 355", true, i.next() == t2); 
    assertEquals("From: Tuotteet line: 356", true, i.next() == t1); 
    try {
    i.next(); 
    fail("Tuotteet: 358 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}